https://www.codingninjas.com/studio/problems/intersection-of-2-arrays_1082149?source=youtube&campaign=love_babbar_codestudio1&leftPanelTab=1

logic 1= basic comparison approach but gives TLE
vector<int> num;
	int i=0;
	int indexstore=0;
	bool equal=0;
	int j=0;
	bool ans=0;
	while(i<n){
		if(j>=m){
			break;
		}
		while(j<m){
			if(arr1[i]==arr2[j]){
				num.push_back(arr2[j]);
				equal=1;
				indexstore=j;
				ans=1;
				break;
			}
			else{
				j++;
			}
		}
		if (ans==1) {
			ans=0;
			j++;
			i++;
			}
			else{
				if(equal==1){
					j=indexstore+1;
					i++;
				}
				else{
					j=0;
					i++;
				}
				}
        }
        return num;  */


logic 2 optimization approach 
#include <bits/stdc++.h> 
#include<vector>
vector<int> findArrayIntersection(vector<int> &arr1, int n, vector<int> &arr2, int m)
{
	int i=0;
	vector<int> num;
	int j=0;
        while(i<n && j<m){
				if(arr1[i]<arr2[j]){
					i++;
				}
				else if(arr1[i]==arr2[j]){
					num.push_back(arr1[i]);
					i++;
					j++;
					}
					else{
						j++;
						}
                 }
        return num;
}


THIS CODE IS FOR UNION OF ARRAYS 
vector < int > sortedArray(vector < int > a, vector < int > b) {
    vector<int> soln;
    int n=a.size();
    int m=b.size();
    int i=0;
    int j=0;
    while(i<n && j<m){
        if(a[i]==a[i-1] && i!=0){
            i++;
            continue;
        }
        if(b[j]==b[j-1] && j!=0){
            j++;
            continue;
        }
        if(a[i]<b[j]){
            soln.push_back(a[i]);
            i++;
        }
        else if(a[i]==b[j]){
            soln.push_back(a[i]);
            i++;
            j++;
        }
        else if(a[i]>b[j]){
            soln.push_back(b[j]);
            j++;
        }
    }
    while(j<m){
        if(b[j]==b[j-1] && j!=0){
            j++;
        }
        else{
            soln.push_back(b[j]);
            j++;
        }
    }
    while(i<n){
        if(a[i]==a[i-1] && i!=0){
            i++;
        }
        else{
            soln.push_back(a[i]);
            i++;
        }
    }
    return soln;
}
